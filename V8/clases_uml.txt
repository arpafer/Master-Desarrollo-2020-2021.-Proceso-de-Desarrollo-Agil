@startuml

title En los métodos de StartView, ResumeView, y PlayView, se sustituye el nombre del controlador por la lógica. Y ConsoleTicTacToe y GraphicsTicTacToe, se usa el constructor de ConsoleView y GraphicsView con la lógica.De todas estas clases se elimina cualquier referencia a los controladores.

abstract class TicTacToe {
   #{abstract}createView(Logic logic): View
   #play()
}

class View {
}

class ConsoleTicTacToe {

}

class Logic {
   +getColor(coordinate)
   +areAllTokensOnBoard()
   +isTicTacToe()
   +next()
   +getActiveColor()
   +putToken(coordinate)
   +getPutTokenError(coordinate)
   +moveToken(origin, target)
   +getOriginMoveTokenError(coordinate)
   +getTargetMoveTokenError(origin, target)
   +reset()
}

class Controller {
   +getColor(coordinate): Color
}

abstract class WithLogicView {
   #Logic logic
}

class BoardView {
   +write(Logic)
}

WithLogicView --> Logic
WithLogicView <|-- PlayView
WithLogicView <|-- StartView
WithLogicView <|-- ResumeView
WithLogicView <|-- PlayerView
WithLogicView <|-- View

TicTacToe <|-- ConsoleTicTacToe
TicTacToe *--> Logic

TicTacToe *--> Game: game
TicTacToe *--> View: view
TicTacToe *--> StartController
TicTacToe *--> PlayController
TicTacToe *--> ResumeController

Controller <|-- StartController
Controller <|-- PlayController
Controller <|-- ResumeController

Controller --> Game

Logic --> Game

Logic *--> StartController
Logic *--> PlayController
Logic *--> ResumeController

ConsoleTicTacToe ..> ConsoleView

View <|-- ConsoleView

ConsoleView *--> StartView
ConsoleView *--> PlayView
ConsoleView *--> ResumeView


PlayView ..> PlayerView

StartView ..> BoardView

@enduml